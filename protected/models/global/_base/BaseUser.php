<?php

/**
 * This is the model base class for the table "global_user".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "global_user" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $id
 * @property string $email
 * @property string $username
 * @property string $password
 * @property string $activated
 * @property string $blocked
 * @property string $create_at
 *
 * The followings are the available model relations:
 * @property FollowUser[] $followers
 * @property FollowUser[] $following
 * @property UserOperationKey $operationKeys
 * @property UserOperationKey $activateKeys
 * @property CourseDocument[] $courseDocuments
 * @property CourseResource[] $courseResources
 * @property CourseBook[] $courseBooks
 * @property Course[] $courses
 * @property Image[] $images
 * @property Message[] $messages
 * @property UploadFile[] $uploadFiles
 */
abstract class BaseUser extends GxActiveRecord
{

    public static function model($className = __CLASS__)
    {
        return parent::model($className);
    }

    public function tableName()
    {
        return 'global_user';
    }

    public static function label($n = 1)
    {
        return Yii::t('app', 'User|Users', $n);
    }

    public static function representingColumn()
    {
        return 'email';
    }

    public function rules()
    {
        return array(
            array('email, username, password', 'required'),
            array('email, username', 'filter', 'filter' => array(Common::getHtmlPurifier(), 'purify')),
            array('email', 'length', 'max' => 255),
            array('username', 'length', 'max' => 40),
            array('password', 'length', 'max' => 60),
            array('activated, blocked', 'length', 'max' => 3),
            array('create_at', 'safe'),
            array('email, username, password, activated, blocked, create_at', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, email, username, password, activated, blocked, create_at', 'safe', 'on' => 'search'),
        );
    }

    public function relations()
    {
        return array(
            'followers' => array(self::MANY_MANY, 'User', FollowUser::model()->tableName() . 'following(user_id,follow_user_id)'),
            'following' => array(self::MANY_MANY, 'User', FollowUser::model()->tableName() . '(follow_user_id,user_id)'),
            'operationKeys' => array(self::HAS_MANY, 'UserOperationKey', 'user_id'),
            'activateKeys' => array(self::HAS_MANY, 'UserOperationKey', 'user_id', 'condition' => "operation='activate'"),
            'courseDocuments' => array(self::HAS_MANY, 'CourseDocument', 'user_id'),
            'courseResources' => array(self::HAS_MANY, 'CourseResource', 'user_id'),
            'courseBooks' => array(self::HAS_MANY, 'CourseBook', 'user_id'),
            'courses' => array(self::MANY_MANY, 'Course', 'follow_course(user_id, course_id)'),
            'images' => array(self::HAS_MANY, 'Image', 'user_id'),
            'messages' => array(self::HAS_MANY, 'Message', 'user_id'),
            'uploadFiles' => array(self::HAS_MANY, 'UploadFile', 'user_id'),
        );
    }

    public function pivotModels()
    {
        return array();
    }

    public function attributeLabels()
    {
        return array(
            'id' => Yii::t('app', 'ID'),
            'email' => Yii::t('app', 'Email'),
            'username' => Yii::t('app', 'Username'),
            'password' => Yii::t('app', 'Password'),
            'activated' => Yii::t('app', 'Activated'),
            'blocked' => Yii::t('app', 'Blocked'),
            'create_at' => Yii::t('app', 'Create At'),
        );
    }

    public function search()
    {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id, true);
        $criteria->compare('email', $this->email, true);
        $criteria->compare('username', $this->username, true);
        $criteria->compare('password', $this->password, true);
        $criteria->compare('activated', $this->activated, true);
        $criteria->compare('blocked', $this->blocked, true);
        $criteria->compare('create_at', $this->create_at, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }
}