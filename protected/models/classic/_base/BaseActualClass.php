<?php

/**
 * This is the model base class for the table "classic_class".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ActualClass".
 *
 * Columns in table "classic_class" available as properties of the model,
 * followed by relations of table "classic_class" available as properties of the model.
 *
 * @property string $id
 * @property string $course_id
 * @property string $major_id
 * @property string $term
 * @property string $grade
 * @property double $credit
 * @property integer $period
 * @property string $course_type
 * @property string $site_raw
 *
 * The followings are the available model relations:
 * @property Course $course
 * @property Major $major
 * @property CourseDocument[] $courseDocuments
 * @property CourseResource[] $courseResources
 * @property CourseBook[] $courseBooks
 * @property Teacher[] $teachers
 * @property TimeSite[] $timeSites
 * @property Teacher[] $classicTeachers
 */
abstract class BaseActualClass extends GxActiveRecord
{

    public static function model($className = __CLASS__)
    {
        return parent::model($className);
    }

    public function tableName()
    {
        return 'classic_class';
    }

    public static function label($n = 1)
    {
        return Yii::t('app', 'ActualClass|ActualClasses', $n);
    }

    public static function representingColumn()
    {
        return 'course_type';
    }

    public function rules()
    {
        return array(
            array('course_id, major_id, term, grade', 'required'),
            array('period', 'numerical', 'integerOnly' => true),
            array('credit', 'numerical'),
            array('course_id, major_id, term, grade', 'length', 'max' => 10),
            array('course_type', 'length', 'max' => 45),
            array('site_raw', 'safe'),
            array('credit, period, course_type, site_raw', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, course_id, major_id, term, grade, credit, period, course_type, site_raw', 'safe', 'on' => 'search'),
        );
    }

    public function relations()
    {
        return array(
            'course' => array(self::BELONGS_TO, 'Course', 'course_id'),
            'major' => array(self::BELONGS_TO, 'Major', 'major_id'),
            'courseDocuments' => array(self::HAS_MANY, 'CourseDocument', 'class_id'),
            'courseResources' => array(self::HAS_MANY, 'CourseResource', 'class_id'),
            'courseBooks' => array(self::HAS_MANY, 'CourseBook', 'class_id'),
            'textBooks' => array(self::HAS_MANY, 'CourseBook', 'class_id', 'condition' => "type='textbook'"),
            'courseResourceCount' => array(self::STAT, 'CourseResource', 'class_id', 'select' => "COUNT(*)"),
            'teachers' => array(self::MANY_MANY, 'Teacher', Teaching::model()->tableName() . '(class_id, teacher_id)'),
            'timeSites' => array(self::HAS_MANY, 'TimeSite', 'class_id'),
        );
    }

    public function pivotModels()
    {
        return array(
            'classicTeachers' => 'Teaching',
        );
    }

    public function attributeLabels()
    {
        return array(
            'id' => Yii::t('app', 'ID'),
            'course_id' => null,
            'major_id' => null,
            'term' => Yii::t('app', 'Term'),
            'grade' => Yii::t('app', 'Grade'),
            'credit' => Yii::t('app', 'Credit'),
            'period' => Yii::t('app', 'Period'),
            'course_type' => Yii::t('app', 'Course Type'),
            'site_raw' => Yii::t('app', 'Site Raw'),
            'course' => null,
            'major' => null,
            'classicTeachers' => null,
            'timeSites' => null,
        );
    }

    public function search()
    {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id, true);
        $criteria->compare('course_id', $this->course_id);
        $criteria->compare('major_id', $this->major_id);
        $criteria->compare('term', $this->term, true);
        $criteria->compare('grade', $this->grade, true);
        $criteria->compare('credit', $this->credit);
        $criteria->compare('period', $this->period);
        $criteria->compare('course_type', $this->course_type, true);
        $criteria->compare('site_raw', $this->site_raw, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function getCampus(){
        $time_sites=$this->timeSites;
        if(!empty($time_sites)){
            return $time_sites[0]['campus'];
        }
        return '';
    }
}