<?php

/**
 * This is the model base class for the table "classic_course_book".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "CourseBook".
 *
 * Columns in table "classic_course_book" available as properties of the model,
 * followed by relations of table "classic_course_book" available as properties of the model.
 *
 * @property string $id
 * @property string $course_id
 * @property string $class_id
 * @property string $teacher_id
 * @property string $user_id
 * @property string $create_time
 * @property string $name
 * @property string $description
 * @property string $comment
 * @property string $url
 * @property string $thumbnail_url
 * @property string $type
 * @property string $author
 * @property string $isbn
 *
 * @property Course $course
 * @property ActualClass $class
 * @property Teacher $teacher
 * @property User $user
 */
abstract class BaseCourseBook extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'classic_course_book';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'CourseBook|CourseBooks', $n);
	}

	public static function representingColumn() {
		return 'create_at';
	}

	public function rules() {
		return array(
            array('name, description, comment, url, thumbnail_url, author', 'filter', 'filter' => array(Common::getHtmlPurifier(), 'purify')),
			array('course_id, create_at, name', 'required'),
			array('course_id, class_id, teacher_id, user_id', 'length', 'max'=>10),
			array('name, author', 'length', 'max'=>255),
			array('type', 'length', 'max'=>9),
			array('isbn', 'length', 'max'=>13),
			array('class_id, teacher_id, user_id, description, comment, url, thumbnail_url, type, author, isbn', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, course_id, class_id, teacher_id, user_id, create_at, name, description, comment, url, thumbnail_url, type, author, isbn', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
            'user' => array(self::BELONGS_TO, 'User', 'user_id'),
            'course' => array(self::BELONGS_TO, 'Course', 'course_id'),
            'class' => array(self::BELONGS_TO, 'ActualClass', 'class_id'),
            'teacher' => array(self::BELONGS_TO, 'Teacher', 'teacher_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'course_id' => null,
			'class_id' => null,
			'teacher_id' => null,
			'user_id' => null,
			'create_at' => Yii::t('app', 'Create Time'),
			'name' => Yii::t('app', 'Name'),
			'description' => Yii::t('app', 'Description'),
			'comment' => Yii::t('app', 'Comment'),
			'url' => Yii::t('app', 'Url'),
			'thumbnail_url' => Yii::t('app', 'Thumbnail Url'),
			'type' => Yii::t('app', 'Type'),
			'author' => Yii::t('app', 'Author'),
			'isbn' => Yii::t('app', 'Isbn'),
			'course' => null,
			'class' => null,
			'teacher' => null,
			'user' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('course_id', $this->course_id);
		$criteria->compare('class_id', $this->class_id);
		$criteria->compare('teacher_id', $this->teacher_id);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('create_at', $this->create_at, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('comment', $this->comment, true);
		$criteria->compare('url', $this->url, true);
		$criteria->compare('thumbnail_url', $this->thumbnail_url, true);
		$criteria->compare('type', $this->type, true);
		$criteria->compare('author', $this->author, true);
		$criteria->compare('isbn', $this->isbn, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}